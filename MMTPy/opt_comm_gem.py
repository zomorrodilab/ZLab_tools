import os

import cobra


def opt_comm_gem(gem_filepath, out_filepath):
    """
    Given a path to a folder containing personalized community GEMs in .mat format, 
    this function will maximize the flux through all fecal exchange reactions.

    Currently, this function works with personalized community GEMs generated by the MgPipe 
    pipeline by Heinken et al. 2019.

    INPUTS:
        GEM_filepath: path to folder containing personalized community GEMs in .mat format
        outpath: path to folder where output files will be written

    OUTPUTS:
        _FEX.txt text files containing maximum flux through each fecal exchange reaction
        _IEX.txt text files containing minimum flux through each individual exchange reaction
    """
    file_names = [file for file in os.listdir(gem_filepath) \
                  if os.path.isfile(os.path.join(gem_filepath, file))]

    for model in file_names:
        # Define paths
        model_path = gem_filepath + model
        fex_outpath = out_filepath + model.split(".")[0] + "_FEX.txt"
        iex_outpath = out_filepath + model.split(".")[0] + "_IEX.txt"

        # Load in model
        print(f"Loading model {model}")
        gem_model = cobra.io.load_matlab_model(model_path)

        # Maximize the flux through all fecal exchange reactions
        print(f"Storing reaction ID for each fecal exchange reaction in model {model}")
        loop_reactions = []
        for reac in [rxn.id for rxn in gem_model.reactions if "UFEt" in rxn.id]:
            loop_reactions.append(reac)

        print(f"Calculating maximum fluxes for each FEX reaction in model {model}")
        counter = 0
        counter_max = len(loop_reactions)
        print(f"Total number of FEX reactions is {str(counter_max)} in model {model}")
        final_fecal_exchange = []
        for rxn in loop_reactions:
            counter += 1
            print(f"Working on maximizing FEX reaction {str(counter)} of {str(counter_max)} in model {model}")
            gem_model.objective = rxn
            solution = gem_model.optimize()
            print(rxn)
            print(solution.objective_value)
            final_fecal_exchange.append(solution.objective_value)
        print("Maximum fluxes calculated")

        # Export the FEX flux list to a txt file, one per line
        print(f"Finished computing FEX fluxes for model {model}, writing to file...")
        with open(fex_outpath, "w") as file:
            for item in final_fecal_exchange:
                file.write("%s\n" % item)

        # Iterate over each FEX reaction, constrain the flux of that reaction to its calculated maximum 
        # from previous step
        # With this constraint in place, then minimize the flux through each of the associated species 
        # specific metabolite exchange reactions
        print("Setting bounds and minimizing fluxes for each species-metabolite exchange reaction...")

        counter = 0
        counter_max = len(loop_reactions)

        print(f"Total number of FEX reactions in model {model} is {str(counter_max)}")

        final_ex_fluxes = {}
        for rxn in range(len(loop_reactions)):
            counter += 1
            print(f"Fecal exchange reaction {str(counter)} of {str(counter_max)} in model {model}")
            if final_fecal_exchange[rxn] != 0:
                old_bounds = gem_model.reactions.get_by_id(loop_reactions[rxn]).bounds
                gem_model.reactions.get_by_id(loop_reactions[rxn]).bounds = \
                    (final_fecal_exchange[rxn], final_fecal_exchange[rxn])
                metabolite = loop_reactions[rxn].replace("UFEt_", "") + "[u]"
                for reac in gem_model.metabolites.get_by_id(metabolite).reactions:
                    if "IEX" in reac.id:
                        gem_model.objective = gem_model.reactions.get_by_id(reac.id)
                        solution = gem_model.optimize(objective_sense = "minimize")
                        final_ex_fluxes[reac.id] = solution.objective_value

            gem_model.reactions.get_by_id(loop_reactions[rxn]).bounds = old_bounds

        # export the final EX fluxes to a txt file
        print(f"Finished computing IEX fluxes for model {model}, writing to file...")
        with open(iex_outpath, "w") as f:
            for key, value in final_ex_fluxes.items():
                f.write("%s:%s\n" % (key, value))
